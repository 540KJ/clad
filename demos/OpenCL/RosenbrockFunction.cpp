//--------------------------------------------------------------------*- C++ -*-
// clad - The C++ Clang-based Automatic Differentiator
//
// A demo, describing how to calculate the Rosenbrock function.
//
// author:  Martin Vasilev <mrtn.vassilev-at-gmail.com>
//----------------------------------------------------------------------------//

// To run the demo please type:
// path/to/clang  -Xclang -add-plugin -Xclang clad -Xclang -load -Xclang \
// path/to/libclad.so  -I../include/ -x c++ -std=c++11 RosenbrockFunction.cpp
//
// A typical invocation would be:
// ../../../../../obj/Debug+Asserts/bin/clang  -Xclang -add-plugin -Xclang clad \
// -Xclang -load -Xclang ../../../../../obj/Debug+Asserts/lib/libclad.dylib     \
// -I../../include/ -x c++ -std=c++11 RosenbrockFunction.cpp

// Necessary for clad to work include
#include "clad/Differentiator/Differentiator.h"

// Rosenbrock function declaration
double rosenbrock_func(double x, double y) {
  return (x - 1) * (x - 1) + 100 * (y - x * x) * (y - x * x);
}

double rosenbrock(double x[], int size) {
  double sum = 0;
  auto rosenbrockX = clad::differentiate(rosenbrock_func, 0);
  auto rosenbrockY = clad::differentiate(rosenbrock_func, 1);

  for (int i = 0; i < size-1; i++) {
    double one = rosenbrockX.execute(x[i], x[i + 1]);
    double two = rosenbrockY.execute(x[i], x[i + 1]);
    sum = sum + one + two;
  }

  return sum;
}

int main() {
  double Xarray[] = {5.92118, 7.20866, 3.97011, 2.1762, 2.85626, 2.20307, 0.69085, 7.93532, 5.65337, 6.85955, 5.90758, 5.28224, 2.62161, 8.67539, 1.46222, 2.10138, 4.13295, 0.08466, 7.68793, 8.06804, 7.88284, 3.96621, 6.76486, 0.77083, 1.49174, 8.51534, 2.93022, 5.13292, 5.47672, 0.11013, 2.74721, 8.47148, 3.11941, 3.72706, 7.53593, 1.28019, 4.00478, 6.88191, 2.46194, 8.168, 4.34243, 0.04283, 7.91383, 7.5684, 8.16347, 6.61969, 8.30302, 2.09168, 8.10424, 5.73457, 6.95934, 0.5672, 6.78869, 2.90273, 8.20089, 8.58406, 3.17881, 2.94772, 4.11558, 3.07909, 2.14522, 1.16894, 1.95471, 1.5525, 4.89215, 2.1625, 5.43113, 6.09621, 1.50431, 1.66596, 8.83095, 0.16853, 2.25557, 8.95953, 8.56722, 8.86616, 4.88146, 2.32112, 0.80835, 3.86465, 5.23057, 4.55968, 4.38214, 6.27758, 7.39259, 2.65116, 1.43801, 5.62174, 5.18457, 8.35589, 7.96282, 1.89002, 1.85211, 0.53783, 2.92959, 0.78361, 0.019, 2.26471, 8.18707, 8.37243, 3.85278, 3.13485, 8.63697, 8.30552, 7.75017, 7.86764, 3.02996, 4.18084, 3.78332, 3.39845, 1.21561, 1.26428, 2.58468, 2.66212, 8.18961, 8.61694, 7.70402, 3.79263, 4.4023, 6.62785, 4.47736, 7.4208, 7.05653, 2.81084, 6.66607, 4.6412, 6.00053, 4.60537, 2.59754, 2.72705, 6.46922, 7.41777, 6.92585, 8.68167, 1.09069, 4.78115, 7.16779, 0.35056, 5.16733, 4.26609, 1.197, 4.0494, 4.76808, 8.92738, 6.27525, 8.46152, 1.53263, 8.00011, 7.87205, 8.49077, 8.18104, 3.6896, 4.70082, 8.33794, 0.42865, 3.16519, 7.43394, 7.16856, 8.6459, 2.67316, 8.55124, 8.53449, 5.02323, 0.04611, 0.4671, 3.43526, 8.43931, 4.45364, 7.05456, 8.30423, 5.82746, 7.14323, 8.99076, 4.54858, 0.02076, 4.33698, 1.31101, 0.47108, 8.2757, 1.27267, 3.28666, 8.26744, 3.56057, 1.45171, 3.78923, 7.04358, 7.30101, 1.93883, 0.94306, 7.46203, 3.08707, 3.81526, 7.54662, 4.16821, 6.84223, 8.70437, 3.33312, 7.80654, 4.76091, 0.98221, 6.08117, 6.81153, 0.63328, 2.92364, 7.04842, 1.01449, 1.08153, 8.04281, 8.88091, 5.85546, 4.17739, 2.62295, 8.41541, 1.03923, 8.46262, 5.82375, 7.16047, 5.4199, 8.77342, 0.8305, 8.81222, 0.99983, 2.6146, 3.10044, 5.18487, 7.94532, 2.53794, 5.95278, 5.24125, 1.07955, 5.84039, 4.97922, 4.37637, 1.98207, 6.76317, 3.75206, 6.23433, 6.24534, 1.95602, 8.75785, 8.39838, 1.32712, 1.31136, 3.03086, 7.88815, 7.26756, 0.04885, 5.43225, 1.24326, 2.58785, 8.78891, 4.66212, 5.61295, 4.88414, 8.1594, 3.09859, 8.95943, 4.82708, 4.14406, 2.65431, 8.30385, 7.71392, 4.15318, 6.06592, 1.31891, 7.61558, 0.12349, 0.91859, 7.89822, 8.56851, 0.61683, 2.51975, 4.78085, 3.25099, 2.27533, 6.05449, 5.14313, 7.02807, 0.88953, 7.50978, 5.33518, 7.5464, 8.23327, 5.67515, 4.07009, 3.99248, 3.11678, 8.47615, 4.42778, 4.57013, 7.72186, 5.99767, 7.6258, 2.75969, 7.85286, 4.12476, 0.53446, 7.20093, 5.8563, 2.29762, 3.48439, 2.07747, 7.99766, 6.52557, 4.72558, 4.29034, 7.93945, 3.75629, 8.76006, 1.73521, 4.33665, 7.55608, 1.61791, 0.80218, 3.65316, 5.85306, 2.44908, 1.68943, 8.80262, 2.40637, 8.59676, 2.4002, 2.85378, 7.77175, 7.21539, 7.04423, 6.36651, 5.18255, 2.8414, 4.98123, 7.84576, 8.93424, 2.31314, 6.05366, 4.9024, 1.9949, 8.45439, 8.12104, 8.33842, 0.534, 6.98016, 8.30877, 4.26021, 7.50072, 8.0755, 1.68409, 0.75541, 1.86766, 2.5036, 5.98253, 2.75779, 3.0382, 2.82673, 8.43923, 6.41687, 5.69921, 3.65442, 5.19701, 3.09844, 7.40649, 7.44433, 5.67042, 8.27402, 3.47367, 5.03876, 3.08928, 8.71952, 3.46028, 8.91399, 5.51574, 4.71947, 8.15434, 4.59376, 0.62957, 3.56817, 5.89495, 6.13283, 4.92755, 6.3968, 5.92282, 2.70654, 0.64387, 1.23117, 4.93703, 8.13166, 1.25503, 3.80989, 6.55434, 8.94157, 0.93716, 8.81576, 5.09054, 8.86688, 3.28804, 2.27075, 7.74166, 0.6321, 6.77476, 5.03706, 2.31546, 2.15474, 8.43711, 3.45969, 3.84886, 3.27017, 5.66551, 8.30528, 0.87289, 1.95425, 0.14231, 5.96288, 2.92838, 8.35955, 0.4049, 8.52088, 0.55827, 6.19595, 6.79903, 8.01768, 7.01172, 5.73856, 4.6093, 2.87847, 0.80644, 8.18776, 8.01623, 8.89152, 2.16945, 0.3425, 3.23655, 2.56379, 3.8454, 6.40449, 6.59313, 3.97122, 2.90451, 1.53188, 2.98325, 0.07209, 0.67966, 6.93304, 3.85833, 5.70755, 2.74582, 8.40104, 8.37635, 0.56276, 8.61321, 5.15381, 6.93463, 8.67864, 1.20795, 8.82136, 8.3911, 7.93074, 8.30628, 1.20424, 3.54705, 1.74135, 5.81274, 8.86372, 5.83541, 8.18872, 2.70514, 2.36407, 5.44803, 3.07373, 1.47513, 8.17315, 2.77164, 5.16106, 6.79433, 7.09857, 1.68248, 7.8629, 8.57, 6.12506, 2.87886, 7.74685, 6.36786, 5.02181, 8.56571, 8.59158, 1.674, 4.98003, 0.78016, 8.37754, 8.34837, 7.62434, 8.15503, 3.24284, 8.07946, 4.98059, 1.4557, 1.37096, 8.78815, 0.71992, 2.76436, 2.90027, 4.83507};
  int size = sizeof(Xarray) / sizeof(*Xarray);
  double result = rosenbrock(Xarray, size);
  printf("The result is %f.\n", result);

  return 0;
}
